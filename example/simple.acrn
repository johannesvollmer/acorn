
// import statements are just alias assignments
List = std.List

// destructuring, used to import functions from math

& cos & sin & pi = std.math


// internal operator definitions
// must be declared in every module again to avoid confusion?
++ = List.append
+ = Int32.add


// tuples are composed types with unnamed members using the operator ","

add = ,a ,b -> a + b

add: Int32, Int32 -> Int32 =
  a, b ->
    add_to_a = (+) a
    add_to_a b



// partial evaluation
five: Int32 = 5
add_five: Int32 -> Int32 = add $, five

// data structures:
File =
  & name: String
  & age: Int64
  & protection: Protection

Protection =
  | public
  | private: User

Bool = | true | false

// type parameters (type function) (could include compile-time array size integer parameters?)

Either = ,A ,B => | left A | right B
Number = Either (,String ,Int64)



Option = A =>
  | value: A
  | empty


map: ,A ,B
  => ,(Maybe A) ,(A -> B) -> Maybe B
  = ,maybe ,action ->
        maybe
          @ Maybe.value: action  // a -> action a
          @: Maybe.empty


map = maybe mapper ->
  maybe
      @value: content -> |value (mapper content)
      @: |empty



// instantiation
default_user = "New User"
default_protection = |private default_user

default_file =
  & name = "New File.idk"
  & protection = default_protection
  & age = 0



// match statements:

message =
  default_protection
    @private "Peter": peter_user ->
      "Access granted to Peter"

    @private: user ->
      "Access granted to " ++ user

    @public:
      "Access granted to everyone"


map = action, option ->
  option
    @value: value -> |value = (action value)
    @empty: |empty

// if-statement
positive = number ->
  @ number <= 0: |empty
  @: |value = number


is_value = option ->
  option
    @value: _ -> |true
    @empty: |false

non_empty = string ->
  @ length string == 0: |value = string
  @: |empty


// currying is explicit for obviousness,
// and to allow currying any (not just the last) argument

cons = element, list -> element :: list
add_name = cons ($, all_names) // same as add_name = name -> cons (name, all_names)


// currying can be done with any value, for example struct or tuple instantiation
adult_with_name: String -> Person =
  & age = 18 & name = $

greater_5 = $ > 5
get_name = $.name

with_name = object, name ->
  & object & name = name

display_name person = maybe.with_default "unknown" (maybe.map person $.name)


// multi line functions
full_name = person ->
  { first & last = person.name }
  first ++ " " ++ last




// in module vec2:

Vector2 =
  & x: Float64
  & y: Float64


add = a, b ->
  & x = a.x + b.x
  & y = a.y + b.y

add =
  , (&x0 = x &y0 = y)
  , (&x1 = x &y1 = y)
  ->
    & x = x0 + x1
    & y = y0 + y1


// recursive types????
List = T =>
  | empty
  | filled:
      &value: T &tail: List T




// type parameter destructuring:
Dict = (A, B) => ...

Result = (& error: E & result: T) =>
  result: T | error: E

MyResult = Result (&error = String, &result = $)



// idea: fake native types
Bool =
  | true
  | false

Int8 = 0 | 1 | 2 | ... | 255

Float32 = ... | 0.0 | 0.0000001 | 0.000002 | ...  // TODO what about those dots?








